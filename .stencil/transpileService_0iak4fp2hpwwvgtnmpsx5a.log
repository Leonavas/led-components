{"moduleFile":{"sourceFilePath":"/home/leonavas/projects/startme/led/led-components/src/components/led-input/led-input.tsx","localImports":[],"externalImports":["@stencil/core"],"potentialCmpRefs":[],"cmpMeta":{"tagNameMeta":"led-input","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/home/leonavas/projects/startme/led/led-components/src/components/led-input/led-input.scss","cmpRelativePath":"led-input.scss","originalComponentPath":"led-input.scss"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"LedInput","documentation":"","type":"typeof LedInput"},"encapsulationMeta":1,"componentClass":"LedInput","membersMeta":{"active":{"memberType":5},"value":{"memberType":5},"isEmpty":{"memberType":5},"first":{"memberType":1,"attribName":"first","attribType":{"text":"string","typeReferences":{}},"reflectToAttrib":false,"propType":2,"jsdoc":{"name":"first","documentation":"","type":"string"}},"last":{"memberType":1,"attribName":"last","attribType":{"text":"string","typeReferences":{}},"reflectToAttrib":false,"propType":2,"jsdoc":{"name":"last","documentation":"","type":"string"}},"placeholder":{"memberType":1,"attribName":"placeholder","attribType":{"text":"string","typeReferences":{}},"reflectToAttrib":false,"propType":2,"jsdoc":{"name":"placeholder","documentation":"","type":"string"}}},"eventsMeta":[],"listenersMeta":[]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/home/leonavas/projects/startme/led/led-components/src/components/led-input/led-input.js"},"jsText":"export class LedInput {\r\n    constructor() {\r\n        this.placeholder = '';\r\n        this.active = false;\r\n        this.isEmpty = true;\r\n    }\r\n    render() {\r\n        return (h(\"div\", { class: \"outer\" },\r\n            h(\"label\", { class: (this.active ? 'selected' : ''), onClick: () => this.handleLabelClick() }, this.placeholder),\r\n            h(\"div\", { class: 'inner ' + (this.active ? 'hasFocus' : '') },\r\n                h(\"input\", { id: \"input\", ref: (el) => this.textInput = el, type: \"text\", onInput: (event) => this.handleOnInput(event), onFocus: () => this.handleOnFocus(), onBlur: () => this.handleOnBlur() }))));\r\n    }\r\n    handleLabelClick() {\r\n        this.textInput.focus();\r\n    }\r\n    handleOnInput(event) {\r\n        console.log('onInput');\r\n        console.log(event.target.value);\r\n        this.value = event.target.value;\r\n        if (this.value === '') {\r\n            this.isEmpty = true;\r\n        }\r\n        else {\r\n            this.isEmpty = false;\r\n        }\r\n    }\r\n    handleOnFocus() {\r\n        console.log('onFocus');\r\n        this.active = true;\r\n    }\r\n    handleOnBlur() {\r\n        console.log('Blur');\r\n        if (this.isEmpty) {\r\n            this.active = false;\r\n        }\r\n        else {\r\n            this.active = true;\r\n        }\r\n    }\r\n    static get is() { return \"led-input\"; }\r\n    static get encapsulation() { return \"shadow\"; }\r\n    static get properties() { return {\r\n        \"active\": {\r\n            \"state\": true\r\n        },\r\n        \"first\": {\r\n            \"type\": String,\r\n            \"attr\": \"first\"\r\n        },\r\n        \"isEmpty\": {\r\n            \"state\": true\r\n        },\r\n        \"last\": {\r\n            \"type\": String,\r\n            \"attr\": \"last\"\r\n        },\r\n        \"placeholder\": {\r\n            \"type\": String,\r\n            \"attr\": \"placeholder\"\r\n        },\r\n        \"value\": {\r\n            \"state\": true\r\n        }\r\n    }; }\r\n    static get style() { return \"/**style-placeholder:led-input:**/\"; }\r\n}\r\n"}